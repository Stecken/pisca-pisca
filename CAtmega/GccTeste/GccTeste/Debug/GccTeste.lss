
GccTeste.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <tester>:
    while(1){
		tester(&pin);
    }
}

void tester(short int *pin){
  80:	fc 01       	movw	r30, r24
	short int *pinb = 0x23;
	short int *portd = 0x2B;
	while(*pinb == 0b00000000){
  82:	83 b1       	in	r24, 0x03	; 3
  84:	94 b1       	in	r25, 0x04	; 4
  86:	89 2b       	or	r24, r25
  88:	a9 f4       	brne	.+42     	; 0xb4 <tester+0x34>
		*pin ^= 0b11111100;
  8a:	20 81       	ld	r18, Z
  8c:	31 81       	ldd	r19, Z+1	; 0x01
  8e:	8c ef       	ldi	r24, 0xFC	; 252
  90:	28 27       	eor	r18, r24
  92:	31 83       	std	Z+1, r19	; 0x01
  94:	20 83       	st	Z, r18
		*portd= *pin;
  96:	3c b9       	out	0x0c, r19	; 12
  98:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	21 ee       	ldi	r18, 0xE1	; 225
  9e:	84 e0       	ldi	r24, 0x04	; 4
  a0:	91 50       	subi	r25, 0x01	; 1
  a2:	20 40       	sbci	r18, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <tester+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <tester+0x2a>
  aa:	00 00       	nop
}

void tester(short int *pin){
	short int *pinb = 0x23;
	short int *portd = 0x2B;
	while(*pinb == 0b00000000){
  ac:	83 b1       	in	r24, 0x03	; 3
  ae:	94 b1       	in	r25, 0x04	; 4
  b0:	89 2b       	or	r24, r25
  b2:	59 f3       	breq	.-42     	; 0x8a <tester+0xa>
  b4:	08 95       	ret

000000b6 <main>:
#define F_CPU 1600000UL
#include <util/delay.h>



int main(void){
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x6>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	short int valorDb = 0b00000000;
	short int valorPb = 0b00000001;
	short int *ddrd = 0x2A;
	short int *ddrb = 0x24;
	short int *portb = 0x25;
	*ddrd = valorDd;
  c0:	8c ef       	ldi	r24, 0xFC	; 252
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9b b9       	out	0x0b, r25	; 11
  c6:	8a b9       	out	0x0a, r24	; 10
	*ddrb = valorDb;
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	14 b8       	out	0x04, r1	; 4
	*portb = valorPb;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	96 b9       	out	0x06, r25	; 6
  d2:	85 b9       	out	0x05, r24	; 5
	short int pin = 0b10101000;
  d4:	88 ea       	ldi	r24, 0xA8	; 168
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	89 83       	std	Y+1, r24	; 0x01
    while(1){
		tester(&pin);
  dc:	ce 01       	movw	r24, r28
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	0e 94 40 00 	call	0x80	; 0x80 <tester>
  e4:	fb cf       	rjmp	.-10     	; 0xdc <main+0x26>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
